// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.domain.repository.UserRepository;
import com.example.snailpasswordmanager.domain.usecase.user.UserUseCases;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProviderUserUseCasesFactory implements Factory<UserUseCases> {
  private final DomainModule module;

  private final Provider<UserRepository> repositoryProvider;

  public DomainModule_ProviderUserUseCasesFactory(DomainModule module,
      Provider<UserRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public UserUseCases get() {
    return providerUserUseCases(module, repositoryProvider.get());
  }

  public static DomainModule_ProviderUserUseCasesFactory create(DomainModule module,
      Provider<UserRepository> repositoryProvider) {
    return new DomainModule_ProviderUserUseCasesFactory(module, repositoryProvider);
  }

  public static UserUseCases providerUserUseCases(DomainModule instance,
      UserRepository repository) {
    return Preconditions.checkNotNull(instance.providerUserUseCases(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
