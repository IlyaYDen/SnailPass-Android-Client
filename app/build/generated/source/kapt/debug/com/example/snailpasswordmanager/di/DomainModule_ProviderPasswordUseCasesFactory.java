// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.domain.repository.PasswordListRepository;
import com.example.snailpasswordmanager.domain.usecase.passwords.PasswordUseCases;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProviderPasswordUseCasesFactory implements Factory<PasswordUseCases> {
  private final DomainModule module;

  private final Provider<PasswordListRepository> repositoryProvider;

  public DomainModule_ProviderPasswordUseCasesFactory(DomainModule module,
      Provider<PasswordListRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public PasswordUseCases get() {
    return providerPasswordUseCases(module, repositoryProvider.get());
  }

  public static DomainModule_ProviderPasswordUseCasesFactory create(DomainModule module,
      Provider<PasswordListRepository> repositoryProvider) {
    return new DomainModule_ProviderPasswordUseCasesFactory(module, repositoryProvider);
  }

  public static PasswordUseCases providerPasswordUseCases(DomainModule instance,
      PasswordListRepository repository) {
    return Preconditions.checkNotNull(instance.providerPasswordUseCases(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
