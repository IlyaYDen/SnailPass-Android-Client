Index: app/src/main/java/com/example/snailpasswordmanager/utils/ApplicationUpdateUtility.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snailpasswordmanager.utils\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.app.DownloadManager\r\nimport android.content.*\r\nimport android.net.Uri\r\nimport android.os.Environment\r\nimport android.util.Log\r\nimport android.view.Window\r\nimport androidx.core.content.FileProvider\r\nimport com.example.snailpasswordmanager.BuildConfig\r\nimport com.example.snailpasswordmanager.R\r\nimport com.example.snailpasswordmanager.presentation.login.LoginActivity\r\nimport com.google.gson.Gson\r\nimport com.google.gson.annotations.SerializedName\r\nimport okhttp3.*\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport java.io.File\r\nimport java.io.IOException\r\n\r\n\r\nobject ApplicationUpdateUtility {\r\n\r\n    private val TAG = \"release\"\r\n\r\n    fun checkForUpdate(loginActivity: LoginActivity) {\r\n        val latestReleaseUrl =\r\n            \"https://api.github.com/repos/IlyaYDen/SnailPass-Android-Client/releases/latest\"\r\n\r\n        // Make a network request to get the latest release information\r\n        val request = Request.Builder()\r\n            .url(latestReleaseUrl)\r\n            .build()\r\n\r\n        val interceptor = HttpLoggingInterceptor()\r\n        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY)\r\n\r\n        val client = OkHttpClient().newBuilder()\r\n            .addInterceptor(interceptor)\r\n            .build()\r\n\r\n        var t: Long = 0\r\n\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                // Handle failure\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                if (!response.isSuccessful) {\r\n                    // Handle failure\r\n                    return\r\n                }\r\n\r\n                val jsonString = response.body?.string()\r\n                val latestRelease = Gson().fromJson(jsonString, LatestRelease::class.java)\r\n\r\n                Log.d(\r\n                    TAG,\r\n                    \"Latest release info: $latestRelease \" + compareVersions(\r\n                        latestRelease.tagName,\r\n                        BuildConfig.VERSION_NAME\r\n                    )\r\n                )\r\n\r\n                if (compareVersions(latestRelease.tagName, BuildConfig.VERSION_NAME) > 0) {\r\n\r\n                    /*\r\n                    setTitle(\"Важное сообщение!\")\r\n                            .setMessage(\"Покормите кота!\")\r\n                            .setIcon(R.drawable.account_icon)\r\n                     */\r\n                    loginActivity.runOnUiThread {\r\n\r\n                        val builder = AlertDialog.Builder(loginActivity)\r\n                        builder\r\n                            .setTitle(R.string.update_title)\r\n                            .setMessage(R.string.update_message)\r\n\r\n                            .setIcon(R.drawable.account_icon)\r\n                            .setPositiveButton(R.string.download) { dialog, id ->\r\n                                downloadUpdate(\r\n                                    loginActivity,\r\n                                    latestRelease\r\n                                )\r\n                            }\r\n                            .setNegativeButton(R.string.cancel) { dialog, id ->\r\n\r\n                                if (File(\r\n                                        loginActivity.getExternalFilesDir(null),\r\n                                        \"app-release.apk\"\r\n                                    ).exists()\r\n                                ) {\r\n                                    File(\r\n                                        loginActivity.getExternalFilesDir(null),\r\n                                        \"app-release.apk\"\r\n                                    ).delete()\r\n                                }\r\n\r\n                                dialog.cancel()\r\n                            }\r\n                        builder.create()\r\n                            .show()\r\n                        /*\r\n                        AlertDialog.Builder(loginActivity)\r\n\r\n                            .setTitle(R.string.update_title)\r\n                            .setMessage(R.string.update_message) // Specifying a listener allows you to take an action before dismissing the dialog.\r\n                            .setIcon(R.drawable.account_icon)\r\n                            // The dialog is automatically dismissed when a dialog button is clicked.\r\n                            .setPositiveButton(\r\n                                android.R.string.yes,\r\n                                DialogInterface.OnClickListener { _, _ ->\r\n                                    downloadUpdate(\r\n                                        loginActivity,\r\n                                        latestRelease\r\n                                    )\r\n                                }) // A null listener allows the button to dismiss the dialog and take no further action.\r\n                            .setNegativeButton(android.R.string.no, null)\r\n                            .setIcon(android.R.drawable.ic_dialog_alert)\r\n                            .show()*/\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun downloadUpdate(\r\n        context: Context,\r\n        latestRelease: LatestRelease\r\n    ) {\r\n\r\n\r\n        // A new release is available, download and install it\r\n        var url = \"\"\r\n        var name = \"\"\r\n        for (i in latestRelease.assets) {\r\n            if (i.name.endsWith(\".apk\")) {\r\n                url = i.browser_download_url\r\n                name = i.name\r\n            }\r\n        }\r\n        if (File(\r\n                context.getExternalFilesDir(null),\r\n                name\r\n            ).exists()\r\n        ) {\r\n            File(\r\n                context.getExternalFilesDir(null),\r\n                name\r\n            ).delete()\r\n        }\r\n\r\n        val request = DownloadManager.Request(Uri.parse(url))\r\n            .setDestinationInExternalFilesDir(context,null, name)\r\n            //.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, name)\r\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n\r\n        val downloadId = downloadManager.enqueue(request)\r\n\r\n\r\n// Register a broadcast receiver to receive the download complete event\r\n        val onComplete = object : BroadcastReceiver() {\r\n            @SuppressLint(\"Range\")\r\n            override fun onReceive(context: Context, intent: Intent) {\r\n                if (intent.action == DownloadManager.ACTION_DOWNLOAD_COMPLETE) {\r\n                    val query = DownloadManager.Query()\r\n                    query.setFilterById(downloadId)\r\n                    val cursor = downloadManager.query(query)\r\n                    if (cursor.moveToFirst()) {\r\n                        val status =\r\n                            cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS))\r\n                        if (status == DownloadManager.STATUS_SUCCESSFUL) {\r\n                            val downloadedFile = File(context.getExternalFilesDir(null), name)\r\n\r\n                            val apkUri = FileProvider.getUriForFile(\r\n                                context,\r\n                                BuildConfig.APPLICATION_ID + \".provider\",\r\n                                downloadedFile\r\n                            )\r\n                            val installIntent = Intent(Intent.ACTION_VIEW)\r\n                            installIntent.setDataAndType(\r\n                                apkUri,\r\n                                \"application/vnd.android.package-archive\"\r\n                            )\r\n                            installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n                            context.startActivity(installIntent)\r\n                        }\r\n                    }\r\n                    cursor.close()\r\n                }\r\n            }\r\n        }\r\n\r\n        context.registerReceiver(onComplete, IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))\r\n    }\r\n\r\n    fun compareVersions(v1: String, v2: String): Int {\r\n        val v1Parts = v1.split('.')\r\n        val v2Parts = v2.split('.')\r\n\r\n        for (i in 0 until maxOf(v1Parts.size, v2Parts.size)) {\r\n            val v1Part = if (i < v1Parts.size) v1Parts[i].filter { it.isDigit() }.toInt() else 0\r\n            val v2Part = if (i < v2Parts.size) v2Parts[i].filter { it.isDigit() }.toInt() else 0\r\n\r\n            if (v1Part > v2Part) {\r\n                return 1\r\n            } else if (v1Part < v2Part) {\r\n                return -1\r\n            }\r\n        }\r\n\r\n        return 0\r\n    }\r\n}\r\n    data class LatestRelease(\r\n    @SerializedName(\"tag_name\")\r\n    val tagName: String,\r\n    @SerializedName(\"name\")\r\n    val name: String,\r\n    @SerializedName(\"body\")\r\n    val description: String,\r\n    @SerializedName(\"html_url\")\r\n    val releaseUrl: String,\r\n    @SerializedName(\"assets\")\r\n    val assets: List<ReleaseAsset>\r\n) {\r\n    data class ReleaseAsset (\r\n        val name : String,\r\n        val browser_download_url:String\r\n            )\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snailpasswordmanager/utils/ApplicationUpdateUtility.kt b/app/src/main/java/com/example/snailpasswordmanager/utils/ApplicationUpdateUtility.kt
--- a/app/src/main/java/com/example/snailpasswordmanager/utils/ApplicationUpdateUtility.kt	(revision 619a532af78cb90cc93dd1a7b3a8253dec292235)
+++ b/app/src/main/java/com/example/snailpasswordmanager/utils/ApplicationUpdateUtility.kt	(date 1679142255140)
@@ -88,6 +88,10 @@
                             }
                             .setNegativeButton(R.string.cancel) { dialog, id ->
 
+
+
+
+
                                 if (File(
                                         loginActivity.getExternalFilesDir(null),
                                         "app-release.apk"
