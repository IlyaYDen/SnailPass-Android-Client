// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.domain.usecase.user;

import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserUseCases_Factory implements Factory<UserUseCases> {
  private final Provider<UserLoginUseCase> userLoginUseCaseProvider;

  public UserUseCases_Factory(Provider<UserLoginUseCase> userLoginUseCaseProvider) {
    this.userLoginUseCaseProvider = userLoginUseCaseProvider;
  }

  @Override
  public UserUseCases get() {
    return newInstance(userLoginUseCaseProvider.get());
  }

  public static UserUseCases_Factory create(Provider<UserLoginUseCase> userLoginUseCaseProvider) {
    return new UserUseCases_Factory(userLoginUseCaseProvider);
  }

  public static UserUseCases newInstance(UserLoginUseCase userLoginUseCase) {
    return new UserUseCases(userLoginUseCase);
  }
}
