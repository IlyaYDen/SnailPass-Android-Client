// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.domain.usecase.passwords.PasswordUseCases;
import com.example.snailpasswordmanager.presentation.mainscreen.MainListViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideMainListViewModelFactory implements Factory<MainListViewModel> {
  private final AppModule module;

  private final Provider<PasswordUseCases> passwordUseCasesProvider;

  public AppModule_ProvideMainListViewModelFactory(AppModule module,
      Provider<PasswordUseCases> passwordUseCasesProvider) {
    this.module = module;
    this.passwordUseCasesProvider = passwordUseCasesProvider;
  }

  @Override
  public MainListViewModel get() {
    return provideMainListViewModel(module, passwordUseCasesProvider.get());
  }

  public static AppModule_ProvideMainListViewModelFactory create(AppModule module,
      Provider<PasswordUseCases> passwordUseCasesProvider) {
    return new AppModule_ProvideMainListViewModelFactory(module, passwordUseCasesProvider);
  }

  public static MainListViewModel provideMainListViewModel(AppModule instance,
      PasswordUseCases passwordUseCases) {
    return Preconditions.checkNotNull(instance.provideMainListViewModel(passwordUseCases), "Cannot return null from a non-@Nullable @Provides method");
  }
}
