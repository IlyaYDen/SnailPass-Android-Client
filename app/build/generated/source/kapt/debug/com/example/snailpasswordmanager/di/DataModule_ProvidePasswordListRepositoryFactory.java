// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.data.database.password.PasswordDb;
import com.example.snailpasswordmanager.domain.repository.PasswordListRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvidePasswordListRepositoryFactory implements Factory<PasswordListRepository> {
  private final DataModule module;

  private final Provider<PasswordDb> dbProvider;

  public DataModule_ProvidePasswordListRepositoryFactory(DataModule module,
      Provider<PasswordDb> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public PasswordListRepository get() {
    return providePasswordListRepository(module, dbProvider.get());
  }

  public static DataModule_ProvidePasswordListRepositoryFactory create(DataModule module,
      Provider<PasswordDb> dbProvider) {
    return new DataModule_ProvidePasswordListRepositoryFactory(module, dbProvider);
  }

  public static PasswordListRepository providePasswordListRepository(DataModule instance,
      PasswordDb db) {
    return Preconditions.checkNotNull(instance.providePasswordListRepository(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
