// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.domain.usecase.user.UserUseCases;
import com.example.snailpasswordmanager.presentation.login.LoginViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideLoginViewModelFactory implements Factory<LoginViewModel> {
  private final AppModule module;

  private final Provider<UserUseCases> useCasesProvider;

  public AppModule_ProvideLoginViewModelFactory(AppModule module,
      Provider<UserUseCases> useCasesProvider) {
    this.module = module;
    this.useCasesProvider = useCasesProvider;
  }

  @Override
  public LoginViewModel get() {
    return provideLoginViewModel(module, useCasesProvider.get());
  }

  public static AppModule_ProvideLoginViewModelFactory create(AppModule module,
      Provider<UserUseCases> useCasesProvider) {
    return new AppModule_ProvideLoginViewModelFactory(module, useCasesProvider);
  }

  public static LoginViewModel provideLoginViewModel(AppModule instance, UserUseCases useCases) {
    return Preconditions.checkNotNull(instance.provideLoginViewModel(useCases), "Cannot return null from a non-@Nullable @Provides method");
  }
}
