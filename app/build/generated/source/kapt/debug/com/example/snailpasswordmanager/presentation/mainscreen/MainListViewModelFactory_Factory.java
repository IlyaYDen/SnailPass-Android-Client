// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.presentation.mainscreen;

import com.example.snailpasswordmanager.domain.usecase.passwords.PasswordUseCases;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainListViewModelFactory_Factory implements Factory<MainListViewModelFactory> {
  private final Provider<PasswordUseCases> passwordUseCasesProvider;

  public MainListViewModelFactory_Factory(Provider<PasswordUseCases> passwordUseCasesProvider) {
    this.passwordUseCasesProvider = passwordUseCasesProvider;
  }

  @Override
  public MainListViewModelFactory get() {
    return newInstance(passwordUseCasesProvider.get());
  }

  public static MainListViewModelFactory_Factory create(
      Provider<PasswordUseCases> passwordUseCasesProvider) {
    return new MainListViewModelFactory_Factory(passwordUseCasesProvider);
  }

  public static MainListViewModelFactory newInstance(PasswordUseCases passwordUseCases) {
    return new MainListViewModelFactory(passwordUseCases);
  }
}
