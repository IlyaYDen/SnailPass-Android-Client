// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.domain.usecase.passwords;

import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PasswordUseCases_Factory implements Factory<PasswordUseCases> {
  private final Provider<GetPasswordList> getPasswordListProvider;

  private final Provider<DeletePassword> deletePasswordProvider;

  private final Provider<InsertPassword> insertPasswordProvider;

  public PasswordUseCases_Factory(Provider<GetPasswordList> getPasswordListProvider,
      Provider<DeletePassword> deletePasswordProvider,
      Provider<InsertPassword> insertPasswordProvider) {
    this.getPasswordListProvider = getPasswordListProvider;
    this.deletePasswordProvider = deletePasswordProvider;
    this.insertPasswordProvider = insertPasswordProvider;
  }

  @Override
  public PasswordUseCases get() {
    return newInstance(getPasswordListProvider.get(), deletePasswordProvider.get(), insertPasswordProvider.get());
  }

  public static PasswordUseCases_Factory create(Provider<GetPasswordList> getPasswordListProvider,
      Provider<DeletePassword> deletePasswordProvider,
      Provider<InsertPassword> insertPasswordProvider) {
    return new PasswordUseCases_Factory(getPasswordListProvider, deletePasswordProvider, insertPasswordProvider);
  }

  public static PasswordUseCases newInstance(GetPasswordList getPasswordList,
      DeletePassword deletePassword, InsertPassword insertPassword) {
    return new PasswordUseCases(getPasswordList, deletePassword, insertPassword);
  }
}
