// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.data.database.password.PasswordDb;
import com.example.snailpasswordmanager.data.database.user.UserDb;
import com.example.snailpasswordmanager.domain.repository.PasswordListRepository;
import com.example.snailpasswordmanager.domain.repository.UserRepository;
import com.example.snailpasswordmanager.domain.usecase.passwords.PasswordUseCases;
import com.example.snailpasswordmanager.domain.usecase.user.UserUseCases;
import com.example.snailpasswordmanager.presentation.login.LoginActivity;
import com.example.snailpasswordmanager.presentation.login.LoginActivity_MembersInjector;
import com.example.snailpasswordmanager.presentation.login.LoginModelFactory;
import com.example.snailpasswordmanager.presentation.mainscreen.MainListActivity;
import com.example.snailpasswordmanager.presentation.mainscreen.MainListActivity_MembersInjector;
import com.example.snailpasswordmanager.presentation.mainscreen.MainListViewModelFactory;
import com.example.snailpasswordmanager.presentation.passworditem.PasswordItemActivity;
import com.example.snailpasswordmanager.presentation.passworditem.PasswordItemActivity_MembersInjector;
import com.example.snailpasswordmanager.presentation.passworditem.PasswordViewModelFactory;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private final DataModule dataModule;

  private final DomainModule domainModule;

  private DaggerAppComponent(AppModule appModuleParam, DomainModule domainModuleParam,
      DataModule dataModuleParam) {
    this.appModule = appModuleParam;
    this.dataModule = dataModuleParam;
    this.domainModule = domainModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private PasswordDb getPasswordDb() {
    return DataModule_ProvidePasswordDbFactory.providePasswordDb(dataModule, AppModule_ProvideContextFactory.provideContext(appModule));
  }

  private PasswordListRepository getPasswordListRepository() {
    return DataModule_ProvidePasswordListRepositoryFactory.providePasswordListRepository(dataModule, getPasswordDb());
  }

  private PasswordUseCases getPasswordUseCases() {
    return DomainModule_ProviderPasswordUseCasesFactory.providerPasswordUseCases(domainModule, getPasswordListRepository());
  }

  private MainListViewModelFactory getMainListViewModelFactory() {
    return new MainListViewModelFactory(getPasswordUseCases());
  }

  private PasswordViewModelFactory getPasswordViewModelFactory() {
    return new PasswordViewModelFactory(getPasswordUseCases());
  }

  private UserDb getUserDb() {
    return DataModule_ProvideUserDbFactory.provideUserDb(dataModule, AppModule_ProvideContextFactory.provideContext(appModule));
  }

  private UserRepository getUserRepository() {
    return DataModule_ProvideUserRepositoryFactory.provideUserRepository(dataModule, getUserDb());
  }

  private UserUseCases getUserUseCases() {
    return DomainModule_ProviderUserUseCasesFactory.providerUserUseCases(domainModule, getUserRepository());
  }

  private LoginModelFactory getLoginModelFactory() {
    return new LoginModelFactory(getUserUseCases());
  }

  @Override
  public void inject(MainListActivity mainListActivity) {
    injectMainListActivity(mainListActivity);
  }

  @Override
  public void inject(PasswordItemActivity passwordItemActivity) {
    injectPasswordItemActivity(passwordItemActivity);
  }

  @Override
  public void inject(LoginActivity loginActivity) {
    injectLoginActivity(loginActivity);
  }

  private MainListActivity injectMainListActivity(MainListActivity instance) {
    MainListActivity_MembersInjector.injectVmFactory(instance, getMainListViewModelFactory());
    return instance;
  }

  private PasswordItemActivity injectPasswordItemActivity(PasswordItemActivity instance) {
    PasswordItemActivity_MembersInjector.injectVmFactory(instance, getPasswordViewModelFactory());
    return instance;
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectVmFactory(instance, getLoginModelFactory());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private DomainModule domainModule;

    private DataModule dataModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      return new DaggerAppComponent(appModule, domainModule, dataModule);
    }
  }
}
