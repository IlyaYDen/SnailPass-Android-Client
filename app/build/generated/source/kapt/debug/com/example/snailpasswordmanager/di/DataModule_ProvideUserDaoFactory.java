// Generated by Dagger (https://dagger.dev).
package com.example.snailpasswordmanager.di;

import com.example.snailpasswordmanager.data.database.user.UserDao;
import com.example.snailpasswordmanager.data.database.user.UserDb;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideUserDaoFactory implements Factory<UserDao> {
  private final DataModule module;

  private final Provider<UserDb> dbProvider;

  public DataModule_ProvideUserDaoFactory(DataModule module, Provider<UserDb> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public UserDao get() {
    return provideUserDao(module, dbProvider.get());
  }

  public static DataModule_ProvideUserDaoFactory create(DataModule module,
      Provider<UserDb> dbProvider) {
    return new DataModule_ProvideUserDaoFactory(module, dbProvider);
  }

  public static UserDao provideUserDao(DataModule instance, UserDb db) {
    return Preconditions.checkNotNull(instance.provideUserDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
